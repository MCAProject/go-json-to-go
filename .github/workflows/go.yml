# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build
      run: go build -o jsontogo main.go

    - name: Test sample
      run: ./jsontogo sample.json

    - name: Run json-to-go using stdin
      shell: bash
      run: |
        set -eEuo pipefail
        ls -al ./jsontogo tests/double-nested-objects.json
        got=$(./jsontogo < tests/double-nested-objects.json)
        exp=$(cat tests/double-nested-objects.go)
        echo "got: '${got}'"
        [[ "${got}" == "${exp}" ]]

    - name: Run json-to-go with a file
      shell: bash
      run: |
        set -eEuo pipefail
        got=$(./jsontogo tests/double-nested-objects.json)
        exp=$(cat tests/double-nested-objects.go)
        echo "got: '${got}'"
        [[ "${got}" == "${exp}" ]]

    - name: Check correct error handling using stdin
      shell: bash
      run: |
        ! ./jsontogo <<< "error"

    - name: Check correct error handling with a file
      shell: bash
      run: |
        ! ./jsontogo <(echo "error")

        
